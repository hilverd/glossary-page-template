#! /usr/bin/env bash
#
# Prepares files to be released.
#
# * release/glossary.html contains a template with static assets hosted by glstatic.net
# * release/glossary-page-template-$release_tag contains a template including static assets

set -eo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

log() {
  echo >&2 "$@"
}

fail() {
  echo >&2 "$@"
  exit 1
}

cd "$SCRIPT_DIR/../dist"
rm -r index.html examples
release_tag="$(git describe --tags)"
release_tag_without_v=$(echo "$release_tag" | sed 's/^v//')
major=$(echo "$release_tag_without_v" | sed 's/^\([^\.]*\)\.\([^\.]*\)\.\(.*\)$/\1/')

mv worker.umd.cjs worker.min.js

# Use release number in static asset file names instead of hash
mv assets/glossary-*.js "glossary-$release_tag".min.js
mv assets/glossary-*.css "glossary-$release_tag".min.css

# This is a hack to allow a glossary HTML file to be viewed directly in a browser.
# Elm will fail when trying to initialise a `Browser.application` for `file://` URLs.
# The command below makes `file://` URLs look like `http://example.com/...` ones.
# See also https://github.com/elm/core/blob/1.0.0/hints/1.md
sed -i \
  -e 's! \([a-zA-Z0-9]\+(\$\?[a-zA-Z0-9]\+\.location\.href\))\.a||! \1).a||\1.replace(/^file:\\/\\//, "http://example.com")).a||!' \
  "glossary-$release_tag".min.js

grep -q 'http://example\.com' "glossary-$release_tag".min.js || fail 'Failed to apply Browser.application hack'

for template in glossary empty; do
  cat $template.html | \
    sed 's!/assets/glossary-[^\.]*.js!'"glossary-$release_tag"'.min.js!' | \
    sed 's!/assets/glossary-[^\.]*.css!'"glossary-$release_tag"'.min.css!' | \
    sed '/warning-about-not-opening-html-file-straight-from-repository/ d' \
    >$template-with-correct-file-names.html

  cat $template.html | \
    sed 's!/assets/glossary-.[^\.]*.js!'"https://glstatic.net/glossary-page-template@$major/glossary"'.min.js!' | \
    sed 's!/assets/glossary-.[^\.]*.css!'"https://glstatic.net/glossary-page-template@$major/glossary"'.min.css!' | \
    sed 's!link rel="stylesheet" href!link rel="stylesheet" crossorigin href!' | \
    sed '/warning-about-not-opening-html-file-straight-from-repository/ d' \
    >$template-with-cdn-links.html

  mv $template-with-correct-file-names.html $template.html
done

rmdir assets
cd ..

mkdir -p release

cat > dist/README.md <<EOF
# Glossary Page Template

This page includes a web interface for making changes that are saved back to the HTML file itself.
This is meant to be used _locally_ by a _single user_ at a time and works best if the file is kept under version control.

If you're on macOS, Linux, or Cygwin and have Node.js installed, then just run

sed -n '/START OF editor.js\$/,\$p' glossary.html | node

You can hide these instructions altogether by setting the \`data-enable-help-for-making-changes\` attribute to \`false\` on the <div id="glossary-page-container"> element.

## worker.min.js (experimental)

The script worker.min.js provides a way for a Node.js-based backend to perform operations on glossaries.
This is an experimental feature and may be removed in the future.
See https://package.elm-lang.org/packages/elm/core/latest/Platform#worker for more information.

EOF

mv dist/glossary-with-cdn-links.html release/glossary.html
mv dist/empty-with-cdn-links.html release/empty.html

package_without_cdn="glossary-page-template-$release_tag"
mv dist "$package_without_cdn"
tar -zvcf "${package_without_cdn}.tar.gz" "$package_without_cdn"
rm -rf "$package_without_cdn"
mv "${package_without_cdn}.tar.gz" release
